{"version":3,"sources":["services/words.js","App.js","services/colors.js","reportWebVitals.js","index.js"],"names":["ALPHABET","getWordValue","word","lword","toLowerCase","split","reduce","acc","currentValue","currentIndex","letter","indexOf","DEFAULT_METER_COLOR","App","useState","name","setName","nameVariations","setNameVariations","wordValue","setWordValue","wordLength","setWordLength","wordRatio","setWordRatio","meterColor","setMeterColor","clearCurrentData","className","style","backgroundColor","value","onChange","e","target","length","onClick","console","log","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAEMA,EAAW,6BAIJC,EAAe,SAACC,GACzB,IAAIC,EAAQD,EAAKE,cACjB,OAAOD,EAAME,MAAM,IAAIC,QAAO,SAACC,EAAKC,EAAeC,GAC/C,OAAOF,GALSG,EAKYP,EAAMM,GALPT,EAASW,QAAQD,IAAW,EAAIV,EAASW,QAAQD,GAAU,EAAI,GAA3E,IAACA,IAMjB,ICJDE,EAAsB,QAsFbC,MApFf,WAEE,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4CF,mBAAS,IAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KACA,EAAkCJ,mBAAS,GAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAoCN,mBAAS,GAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KACA,EAAkCR,mBAAS,GAA3C,mBAAOS,EAAP,KAAkBC,EAAlB,KACA,EAAoCV,mBAASF,GAA7C,mBAAOa,EAAP,KAAmBC,EAAnB,KA0BMC,EAAmB,WACvBX,EAAQ,IACRI,EAAa,GACbE,EAAc,GACdI,EAAcd,GACdY,EAAa,IAGf,OACE,sBAAKI,UAAU,MAAf,UACE,sBAAKA,UAAU,aAAaC,MAAO,CAACC,gBAAiBL,GAArD,UACE,sBAAKG,UAAU,mBAAf,UACE,uBAAOG,MAAOhB,EAAMiB,SAhCP,SAACC,GAEpB,ICjB8BF,EDiB1BhB,EAAOkB,EAAEC,OAAOH,MACpBf,EAAQD,GACRK,EAAanB,EAAac,IAC1BO,EAAcP,EAAKoB,QACnBT,GCrB8BK,EDqBE9B,EAAac,ICpBjC,GALE,YAOHgB,EAAQ,IANH,cAQLA,EAAQ,IANJ,aASNA,EAAQ,KAVC,kBAUb,GDcLP,EAAavB,EAAac,GAAQA,EAAKoB,WA0BjC,wBAAQP,UAAU,aAAaQ,QAxBlB,SAACH,GACpBI,QAAQC,IAAI,iBACZpB,EAAkB,GAAD,mBAAMD,GAAN,CAAsB,CACrCF,OACAM,aACAF,YACAI,gBAEFI,KAgBM,qBAEF,sBAAKC,UAAU,iBAAf,UACE,qBAAKA,UAAU,gBAEf,8CAAiBT,KACjB,+CAAkBE,KAClB,gEAAmCE,WAGvC,sBAAKK,UAAU,gBAAf,oBAEE,kCACE,kCACE,sCACA,uCACA,wCACA,0CAEF,gCACGX,GAAkBA,EAAesB,KAAI,SAAArC,GAAI,OAChC,+BACE,6BAAKA,EAAKa,OACV,6BAAKb,EAAKiB,YACV,6BAAKjB,EAAKmB,aACV,6BAAKnB,EAAKqB,8BEnEnBiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.35a6b21a.chunk.js","sourcesContent":["// Takes in a string and returns the value of a word\n\nconst ALPHABET = 'abcdefghijklmnopqrstuvwxyz';\n\nconst getLetterValue = (letter) => ALPHABET.indexOf(letter) >= 0 ? ALPHABET.indexOf(letter) + 1 : 0;\n\nexport const getWordValue = (word) => {\n    let lword = word.toLowerCase();\n    return lword.split('').reduce((acc, currentValue , currentIndex) => {\n        return acc + getLetterValue(lword[currentIndex]);\n    }, 0)\n}","import { useState } from 'react';\nimport './App.css';\nimport Header from './components/Header.jsx';\nimport { getColorFromValue } from './services/colors';\nimport { getWordValue } from './services/words';\n\nconst DEFAULT_METER_COLOR = 'black';\n\nfunction App() {\n\n  const [name, setName] = useState('');\n  const [nameVariations, setNameVariations] = useState([]);\n  const [wordValue, setWordValue] = useState(0);\n  const [wordLength, setWordLength] = useState(0);\n  const [wordRatio, setWordRatio] = useState(0);\n  const [meterColor, setMeterColor] = useState(DEFAULT_METER_COLOR);\n\n  const renderListItems = (arr) => {\n    return arr.map(item => <li key={item}>{item}</li>)\n  }\n  \n  const handleChange = (e) => { \n// /TODO how to set multiple props at once AND repaint sdom\n    let name = e.target.value;\n    setName(name);\n    setWordValue(getWordValue(name));\n    setWordLength(name.length);\n    setMeterColor(getColorFromValue(getWordValue(name)));\n    setWordRatio(getWordValue(name) / name.length);\n  }\n  const handleSubmit = (e) => {\n    console.log(\"submitHandled\")\n    setNameVariations([ ...nameVariations, {\n      name,\n      wordLength,\n      wordValue,\n      wordRatio\n    }])\n    clearCurrentData();\n  }\n\n  const clearCurrentData = () => {\n    setName('');\n    setWordValue(0);\n    setWordLength(0);\n    setMeterColor(DEFAULT_METER_COLOR);\n    setWordRatio(0);\n  }\n  \n  return (\n    <div className=\"App\">\n      <div className=\"topSection\" style={{backgroundColor: meterColor}}>\n        <div className=\"dataEntrySection\">\n          <input value={name} onChange={handleChange} />\n          <button className=\"saveButton\" onClick={handleSubmit}>Save</button>\n        </div>\n        <div className=\"resultsSection\">\n          <div className=\"displayArea\">\n          </div>\n          <h1>Word Value: {wordValue}</h1>\n          <h2>Word Length: {wordLength}</h2>\n          <h2>Value ratio (Value / Length): {wordRatio}</h2>\n        </div>\n      </div>\n      <div className=\"bottomSection\">\n      Results\n        <table>\n          <thead>\n            <th>Word</th>\n            <th>Value</th>\n            <th>Length</th>\n            <th>Ratio</th>\n          </thead>\n          <tbody>\n            {nameVariations && nameVariations.map(word =>\n                      <tr>\n                        <td>{word.name}</td>\n                        <td>{word.wordValue}</td>\n                        <td>{word.wordLength}</td>\n                        <td>{word.wordRatio}</td>\n                      </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n\n\n\n    </div>\n  );\n}\n\nexport default App;\n","\n\nconst LOW_COLOR = 'lightblue';\nconst CLOSE_COLOR = 'lightyellow';\nconst PERFECT_COLOR = 'lightgreen';\nconst HIGH_COLOR = 'indianred';\nexport const getColorFromValue = (value) => {\n    if (value < 50) {\n        return LOW_COLOR;\n    } else if (value < 100) {\n        return CLOSE_COLOR;\n    } else if (value > 100) {\n        return HIGH_COLOR;\n    }\n    else if (value = 100) {\n        return PERFECT_COLOR\n    }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}